#!/usr/bin/env perl
use strict;
use warnings;
use Time::Piece;
use Mojo::Util 'tablify';

$ENV{GIT_DIR} ||= '.git';
my @git_argv = git_argv(@ARGV);
-d '.git' ? run_single(@git_argv) : run_multiple(@git_argv);

sub git_argv {
  my @git_argv   = grep { !/^--author=all/ } @_;
  my $last_month = gmtime() - 86400 * 30;

  push @git_argv, '--pretty=format:%h %cd %ad %s';
  push @git_argv, '--date=short' unless grep {/^--date/} @ARGV;
  push @git_argv, '--color' unless grep {/^--no-color/} @ARGV;
  push @git_argv, sprintf '--author=%s', git_config('user.name') unless grep {/^--author/} @ARGV;
  push @git_argv, sprintf '--since=%s-%02s-01', $last_month->year, $last_month->mon unless grep {/^--since/} @ARGV;

  return @git_argv;
}

sub git_capture {
  my $sub_command = $_[0];
  warn "\$ git @_ ($ENV{GIT_DIR})\n" if $ENV{DEBUG};
  open my $GIT, '-|', git => @_ or die "git @_: $!";
  my @out;
  while (<$GIT>) { s!\s+$!!; push @out, [$sub_command => split /\s/, $_, 4] }
  return @out;
}

sub git_config {
  my $key = shift;
  my $val = qx{git config --get $key};
  chomp $val;
  return $val;
}

sub run_multiple {
  my @git_argv = @_;
  my @all;

  opendir my $DH, '.' or die "opendir .: $!";
  while (my $dir = readdir $DH) {
    next unless -d "$dir/.git";
    local $ENV{GIT_DIR} = "$ENV{PWD}/$dir/.git";
    push @all, map { splice @$_, 4, 0, $dir; $_ } (git_capture(log => @git_argv), git_capture(reflog => @git_argv));
  }

  my @headers = qw(Type Hash Committed Authored Project Subject);
  print tablify([\@headers, uniq_sort([2, 5], @all)]);
}

sub run_single {
  my @headers = qw(Type Hash Committed Authored Subject);
  print tablify([\@headers, uniq_sort([2, 4], git_capture(log => @_), git_capture(reflog => @_))]);
}

sub uniq_sort {
  my $uniq_indexes = shift;
  my %uniq;

  return map { $_->[1] } sort { $a->[0] cmp $b->[0] } grep { !$uniq{$_->[0]}++ } map {
    my $i = $_;
    my $key = join ':', map { $i->[$_] } @$uniq_indexes;
    [$key, $i];
  } @_;
}
